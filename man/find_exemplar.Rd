% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exemplar.R
\name{find_exemplar}
\alias{find_exemplar}
\title{Find exemplar of a matrix}
\usage{
find_exemplar(
  x,
  which = c("col", "row"),
  na.rm = TRUE,
  distance = "euclidean",
  summary.method = sum,
  ...
)
}
\arguments{
\item{x}{Matrix to operate on}

\item{which}{One of c("cols","rows") for the exemplar}

\item{na.rm}{Should missing values be removed prior to calculating distances}

\item{distance}{A distance measure to use (see [distance()] for details).}

\item{summary.method}{A summary method applied to distances (default is sum)
which is then minimized to find the exemplar.}

\item{...}{Any further parameters to distance function.}
}
\description{
Identify the exemplar (e.g., a medoid) of the matrix.
}
\details{
This function is a generic approach to identifying a medoid or
 exemplar in a matrix. A medoid is the column (row) with the minimum
 summed distance to all other columns (rows). However, it is possible to
 consider other operations than sum of distances (e.g., mean distance). This
 function provides the non-standard implementation of medoid (exemplars).

 While this function is only slightly more complex, see [medoid()] for
 the definition. The implementation is slightly more efficient than this one,
 due to the generic nature of the summary method.

 Note that one of the motivating factors for this extension to medoids is
 that the IRON algorithm uses the minimum **mean** distance vs. the minimum
 **summed** distance.
}
